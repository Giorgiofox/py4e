%
﻿
Esecuzione condizionale
=====================
Espressioni booleane
-------------------

\index{boolean expression}
\index{expression!boolean}
\index{logical operator}
\index{operator!logical}
Un'espressione *booleana* è un'espressione che può essere o vera o falsa. Gli esempi seguenti usano l'operatore `==` per la comparazione di due operandi e produrranno `True` nel caso siano uguali o `False` in caso contrario:

~~~~ {.python .trinket}
>>> 5 == 5
True
>>> 5 == 6
False
{}
~~~~


`True` e `False` non sono stringhe ma sono valori speciali che appartengono al tipo `bool`:
\index{True special value}
\index{False special value}
\index{special value!True}
\index{special value!False}
\index{bool type}
\index{type!bool}


~~~~ {.python}
>>> type(True)
<class 'bool'>
>>> type(False)
<class 'bool'>
~~~~


L'operatore `==` è uno degli *operatori di comparazione*; gli altri sono:

~~~~ {.python}
      x != y               # x is not equal to y
      x > y                # x is greater than y
      x < y                # x is less than y
      x >= y               # x is greater than or equal to y
      x <= y               # x is less than or equal to y
      x is y               # x is the same as y
      x is not y           # x is not the same as y
~~~~


Anche se queste operazioni vi saranno probabilmente familiari, i simboli utilizzati da Python sono diversi da quelli matematici. Un errore comune è l'utilizzare un singolo segno di uguale (`=`) al posto di un doppio segno di uguale (`==`). Ricordate che `=` è un operatore di assegnazione mentre `==` è un operatore di comparazione. Non esiste un qualcosa di simile a `=<` o `=>`.
\index{comparison operator}
\index{operator!comparison}
Operatori logici
-----------------

\index{logical operator}
\index{operator!logical}
Esistono tre *operatori logici*: `and`, `or` e `not`. La semantica (significato) di questi operatori è simile al loro significato in inglese. Ad esempio, `x> 0 and x <10` è TRUE solo se `x` è maggiore di 0 *e* minore di 10.
\index{and operator}
\index{or operator}
\index{not operator}
\index{operator!and}
\index{operator!or}
\index{operator!not}
`n%2 == 0 or n%3 == 0` è TRUE se si verifica *una* delle condizioni, cioè se il numero è divisibile per 2 *or* 3.  Infine, l'operatore `not` nega un'espressione booleana, quindi `not (x>y)` è true se` x> y` è false; cioè, se `x` è minore o uguale a `y`.  In pratica, gli operandi degli operatori logici dovrebbero essere espressioni booleane, ma Python non è molto rigoroso in merito. Qualsiasi numero diverso da zero viene interpretato come "true".

~~~~ {.python}
>>> 17 and True
True
~~~~


Questa flessibilità può essere utile, ma ci sono alcuni dettagli che potrebbero creare confusione. Potrebbe essere il caso di evitare un evento del genere, a meno che non si sappia cosa si stia facendo.  Esecuzione condizionale
---------------------

\index{conditional statement}
\index{statement!conditional}
\index{if statement}
\index{statement!if}
\index{conditional executions}
Per scrivere programmi utili, abbiamo quasi sempre bisogno di verificare le condizioni e modificare di conseguenza il comportamento del programma. Le *istruzioni condizionali* ci fornisco questa capacità. La forma più semplice è l'istruzione `if`:

~~~~ {.python}
if x > 0 :
    print('x is positive')
~~~~


L'espressione booleana dopo l'istruzione `if` è chiamata *condizione*. Terminiamo l'istruzione `if` con il carattere due punti (:) e la linea/linee seguenti l'istruzione devono essere indentate (rientrate).
![If Logic](height=1.5in@../images/if)
  Se la condizione logica è vera, allora verrà eseguita l'istruzione indentata. Se la condizione logica è falsa, l'istruzione indentata verrà saltata.
\index{condition}
\index{compound statement}
\index{statement!compound}
Le istruzioni `if` hanno la stessa struttura delle definizioni di funzione o cicli `for`^[Impareremo a conoscere le funzioni nel Capitolo 4 e i cicli nel Capitolo 5.]. L'istruzione consiste in una riga di intestazione che termina con il carattere dei due punti (:) seguito da un blocco indentato. Istruzioni come questa sono chiamate *istruzioni composte* perché si estendono su più di una riga.  Non c'è alcun limite al numero di istruzioni che possono apparire nel blocco, ma deve esserne presente almeno una. Occasionalmente, è utile avere un blocco senza istruzioni (di solito come segnaposto per codice non ancora scritto). In tal caso, puoi usare l'istruzione `pass`, che non ha alcun effetto.
\index{pass statement}
\index{statement!pass}


~~~~ {.python}
if x < 0 :
    pass          # need to handle negative values!
~~~~


Se si immette un'istruzione `if` nell'interprete Python, il prompt cambierà da tre chevron a tre punti per indicare che ci si trova nel mezzo di un blocco di istruzioni, come mostrato di seguito:

~~~~ {.python}
>>> x = 3
>>> if x < 10:
...    print('Small')
...
Small
>>>
~~~~


Quando si utilizza l'interprete Python, è necessario lasciare una riga vuota alla fine di un blocco, altrimenti Python restituirà un errore:

~~~~ {.python}
>>> x = 3
>>> if x < 10:
...    print('Small')
... print('Done')
  File "<stdin>", line 3
    print('Done')
        ^
SyntaxError: invalid syntax
~~~~


Durante la scrittura e l'esecuzione di uno script non è necessaria una riga vuota alla fine di un blocco di istruzioni, ma può migliorare la leggibilità del codice.  Esecuzione alternativa
---------------------

\index{alternative execution}
\index{else keyword}
\index{keyword!else}
Una seconda forma dell'istruzione `if` è l'*esecuzione alternativa*, in cui ci sono due possibilità e la condizione determina quale debba essere eseguita. La sintassi ha questo aspetto:

~~~~ {.python}
if x%2 == 0 :
    print('x is even')
else :
    print('x is odd')
~~~~


Quando `x` è diviso per 2, se il resto è 0, allora sappiamo che` x` è pari e il programma visualizza un messaggio in tal senso. Se la condizione è falsa, viene eseguita la seconda serie di istruzioni.
![If-Then-Else Logic](height=1.5in@../images/if-else)
Poiché una condizione deve necessariamente essere vera o falsa, verrà eseguita esattamente una delle alternative. Le alternative sono chiamate *branches*, perché sono come rami nel flusso di esecuzione.
\index{branch}
Condizioni concatenate
--------------------

\index{chained conditional}
\index{conditional!chained}
A volte ci sono più di due possibilità e abbiamo bisogno di più di due branches. Un modo per esprimere un simile calcolo è una condizione *concatenata*:

~~~~ {.python}
if x < y:
    print('x is less than y')
elif x > y:
    print('x is greater than y')
else:
    print('x and y are equal')
~~~~


`elif` è un'abbreviazione di" else if ". Anche stavolta verrà eseguito esattamente un ramo.
![If-Then-ElseIf Logic](height=2.0in@../images/elif)
Non c'è limite al numero di istruzioni `elif`. Se esiste una condizione `else`, deve essere messa alla fine, ma non deve essercene necessariamente una.
\index{elif keyword}
\index{keyword!elif}


~~~~ {.python}
if choice == 'a':
    print('Bad guess')
elif choice == 'b':
    print('Good guess')
elif choice == 'c':
    print('Close, but not correct')
~~~~


Ogni condizione viene controllata in ordine. Se la prima condizione è falsa, verrà controllata la successiva e così via. Se una tra queste condizioni risulta vera, verrà eseguito il branch corrispondente e l'istruzione sarà terminata. Anche se più di una condizione è vera, verrà eseguito solo il primo branch vero.  Condizioni nidificate
-------------------

\index{nested conditional}
\index{conditional!nested}
Una condizione può anche essere annidata in un'altra. Avremmo potuto scrivere l'esempio a tre branches in questo modo:

~~~~ {.python}
if x == y:
    print('x and y are equal')
else:
    if x < y:
        print('x is less than y')
    else:
        print('x is greater than y')
~~~~


La condizione esterna contiene due branches. Il primo branch contiene una semplice istruzione. Il secondo branch contiene un'altra istruzione `if`, che ha due branches propri. Questi due branches sono entrambi semplici istruzioni, sebbene potessero essere anche istruzioni condizionali.
![Nested If Statements](height=2.0in@../images/nested)
Sebbene l'indentazione delle istruzioni renda la struttura visivamente più intuitiva, le *condizioni nidificate* diventano difficili da leggere molto rapidamente. In generale, è una buona idea evitarli quando è possibile.  Gli operatori logici forniscono spesso un modo per semplificare le istruzioni con condizioni nidificate. Ad esempio, possiamo riscrivere il seguente codice usando una singola condizione:

~~~~ {.python}
if 0 < x:
    if x < 10:
        print('x is a positive single-digit number.')
~~~~


L'istruzione `print` viene eseguita solo se vengono soddisfatte entrambe le condizioni, quindi possiamo ottenere lo stesso effetto con l'operatore `and`:

~~~~ {.python}
if 0 < x and x < 10:
    print('x is a positive single-digit number.')
~~~~


Gestione delle eccezioni usando try ed except
----------------------------------------
In precedenza abbiamo esaminato un segmento di codice in cui abbiamo utilizzato le funzioni `input` e` int` per leggere e analizzare un numero intero inserito dall'utente. Abbiamo anche visto quanto far ciò potrebbe risultare insidioso:

~~~~ {.python}
>>> prompt = "What...is the airspeed velocity of an unladen swallow?\n"
>>> speed = input(prompt)
What...is the airspeed velocity of an unladen swallow?
What do you mean, an African or a European swallow?
>>> int(speed)
ValueError: invalid literal for int() with base 10:
>>>
~~~~


Quando vengono eseguite queste istruzioni nell'interprete Python, si riceve un nuovo prompt dall'interprete, come se pensasse "oops" e passasse all'istruzione successiva.  Tuttavia, se si inserisce questo codice in uno script Python e si verifica questo errore, lo script si ferma immediatamente nel suo percorso con un traceback. Non esegue l'istruzione successiva.
\index{traceback}
Ecco un programma di esempio per convertire una temperatura da Fahrenheit a Celsius:
\index{fahrenheit}
\index{celsius}
\index{temperature conversion}

\VerbatimInput{../code3/fahren.py}
Se eseguiamo questo codice e gli diamo input non validi, fallirà semplicemente con un messaggio di errore poco amichevole:

~~~~
python fahren.py
Enter Fahrenheit Temperature:72
22.22222222222222
~~~~




~~~~
python fahren.py
Enter Fahrenheit Temperature:fred
Traceback (most recent call last):
  File "fahren.py", line 2, in <module>
    fahr = float(inp)
ValueError: could not convert string to float: 'fred'
~~~~


Esiste una struttura di esecuzione condizionale incorporata in Python che serve a gestire questi tipi di errori previsti e inaspettati chiamati "try / except". La finalità di `try` e `except` è che voi sapete in anticipo che alcune sequenze di istruzioni potrebbero incontrare problemi e pertanto vorreste aggiungere alcune istruzioni da eseguire in caso di errore. Queste istruzioni aggiuntive (il blocco except) vengono ignorate se non ci sono errori.  Potreste pensare alla funzione `try` e `except` in Python come una "polizza assicurativa" su una sequenza di istruzioni.  Ad esempio, possiamo riscrivere il codice del nostro convertitore di temperatura come segue:
\VerbatimInput{../code3/fahren2.py}
Python inizia eseguendo la sequenza di istruzioni nel blocco `try`. Se tutto va bene, salta il blocco `except` e procede. Se si verifica un'eccezione nel blocco `try`, Python salta fuori dal blocco `try` ed esegue la sequenza di istruzioni nel blocco `except`.

~~~~
python fahren2.py
Enter Fahrenheit Temperature:72
22.22222222222222
~~~~




~~~~
python fahren2.py
Enter Fahrenheit Temperature:fred
Please enter a number
~~~~


Gestire un'eccezione con un'istruzione `try` è detto *catching * di un'eccezione. In questo esempio, la condizione `except` stampa un messaggio di errore. In generale, catturare un'eccezione vi dà la possibilità di risolvere il problema, o riprovare, o almeno di terminare il programma elegantemente.  Valutazione di un cortocircuito di espressioni logiche
-----------------------------------------------

\index{short circuit}
Quando Python sta elaborando un'espressione logica come `x> = 2 and (x/y)> 2`, calcola l'espressione da sinistra a destra. A causa della definizione di `and`, se `x` è minore di 2, l'espressione `x> = 2` è `False` e ​​quindi l'intera espressione è `False` indipendentemente dal fatto che `(x/y)> 2` restituisca `True` o `False`.  Quando Python rileva che non c'è nulla da guadagnare valutando il resto di un'espressione logica, interrompe la sua valutazione e non esegue i calcoli nel resto di questa. Quando la valutazione di un'espressione logica si arresta perché il valore complessivo è già noto, viene chiamato * cortocircuito * della valutazione.
\index{guardian pattern}
\index{pattern!guardian}
Anche se questo può sembrare una sottigliezza, il comportamento di cortocircuito porta a una tecnica intelligente chiamata * schema del guardiano *. Considerate la seguente sequenza di codice nell'interprete Python:

~~~~ {.python}
>>> x = 6
>>> y = 2
>>> x >= 2 and (x/y) > 2
True
>>> x = 1
>>> y = 0
>>> x >= 2 and (x/y) > 2
False
>>> x = 6
>>> y = 0
>>> x >= 2 and (x/y) > 2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>>
~~~~


Il terzo calcolo non è riuscito perché Python stava calcolando `(x / y)` e `y` era zero, il che causa un errore di runtime. Ma il secondo esempio *non* ha fallito perché la prima parte dell'espressione `x>=2` è stata calcolata come `False` quindi `(x / y)` non è mai stato eseguito a causa della regola del *cortocircuito* e non c'erano errori.  Possiamo costruire l'espressione logica per posizionare strategicamente un calcolo *guard* appena prima del calcolo che potrebbe causare un errore, come di seguito:

~~~~ {.python}
>>> x = 1
>>> y = 0
>>> x >= 2 and y != 0 and (x/y) > 2
False
>>> x = 6
>>> y = 0
>>> x >= 2 and y != 0 and (x/y) > 2
False
>>> x >= 2 and (x/y) > 2 and y != 0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>>
~~~~


Nella prima espressione logica, `x>=2` è `False`, quindi il calcolo si ferma su `and`. Nella seconda espressione logica, `x>=2` è `True` ma `y!= 0` è `False` quindi non raggiungiamo mai `(x/y)`.  Nella terza espressione logica, il `y != 0` viene *dopo* il calcolo `(x/y)` pertanto l'espressione fallisce con un errore.  Nella seconda espressione, diciamo che `y != 0` funge da *guardia* per assicurare che `(x/y)` venga eseguito solo se `y` è diverso da zero.  Debug
---------

\index{debugging}
\index{traceback}
Il traceback di Python viene visualizzato quando si verifica un errore che contiene molte informazioni, che possono essere difficili da gestire. Le parti più utili sono di solito:
- Che tipo di errore era, e

- Dove si è verificato.
Gli errori di sintassi sono solitamente facili da trovare, ma ci sono alcuni tranelli. Gli errori di spaziatura possono essere difficoltosi perché gli spazi e le tabulazioni sono invisibili e siamo abituati ad ignorarli.
\index{whitespace}


~~~~ {.python}
>>> x = 5
>>>  y = 6
  File "<stdin>", line 1
    y = 6
    ^
IndentationError: unexpected indent
~~~~


In questo esempio, il problema è che la seconda riga è rientrata di uno spazio. Ma il messaggio di errore punta ad `y`, e ciò può essere fuorviante. In generale, i messaggi di errore indicano dove è stato rilevato il problema, ma l'errore effettivo potrebbe essere precedente nel codice, a volte su una riga precedente.  In generale, i messaggi di errore indicano dove è stato scoperto il problema, ma spesso quel punto non indica dove è stato causato.  Glossario
--------
blocco: la sequenza di istruzioni all'interno di un'istruzione composta.
\index{body}
Un'espressione *booleana* è un'espressione che può essere o vera o falsa.
\index{boolean expression}
\index{expression!boolean}
branch: una delle sequenze di istruzioni alternative in un'istruzione condizionale.
\index{branch}
condizione concatenata: un'istruzione condizionale con una serie di branches alternativi.
\index{chained conditional}
\index{conditional!chained}
operatore di comparazione: uno degli operatori che confronta i suoi operandi: `==`, `!= `,`> `,` <`,`> = `, e` <= `. istruzione condizionale: una istruzione che controlla il flusso di esecuzione in base ad alcune condizioni.
\index{conditional statement}
\index{statement!conditional}
condizione: l'espressione booleana in un'istruzione condizionale che determina quale branc viene eseguito.
\index{condition}
: Un'istruzione che composta da un'intestazione e un corpo. L'intestazione termina con due punti (:). Il corpo è rientrato rispetto all'intestazione.
\index{compound statement}
schema del guardiano: quando costruiamo un'espressione logica con comparazioni aggiuntive per sfruttare il comportamento di cortocircuito.
\index{guardian pattern}
\index{pattern!guardian}
operatore logico: uno degli operatori che combina espressioni booleane: `and`, `or`, e `not`. condizionale nidificato: un'istruzione condizionale che appare in uno dei branches di un'altra istruzione condizionale.
\index{nested conditional}
\index{conditional!nested}
traceback: un elenco delle funzioni che sono in esecuzione, che verranno visualizzate quando si verifica un'eccezione.
\index{traceback}
cortocircuito: quando Python è a metà strada nel calcolo di un'espressione logica e interrompe il calcolo perché Python conosce il valore finale dell'espressione senza dover calcolare il resto dell'espressione.
\index{short circuit}
Esercizi
---------
** Esercizio 1: Riscrivete il vostro calcolo della retribuzione per attribuire ad un dipendente una maggiorazione oraria di 1,5 volte, per le ore lavorate superiori a 40.**

~~~~
Enter Hours: 45
Enter Rate: 10
Pay: 475.0
~~~~


** Esercizio 2: Riscrivete il vostro programma di calcolo della retribuzione usando `try` e `except` in modo che il tuo programma gestisca input non-numerici in maniera elegante stampando un messaggio ed uscendo dal programma. Di seguito vengono mostrate due esecuzioni del programma: **

~~~~
Enter Hours: 20
Enter Rate: nine
Error, please enter numeric input
~~~~




~~~~
Enter Hours: forty
Error, please enter numeric input
~~~~


** Esercizio 3: scrivete un programma per richiedere un punteggio compreso tra 0.0 e 1.0. Se il punteggio non è compreso nell'intervallo, visualizzate un messaggio di errore. Se il punteggio è compreso tra 0,0 e 1,0, visualizzate un voto utilizzando la seguente tabella: **

~~~~
 Score   Grade
>= 0.9     A
>= 0.8     B
>= 0.7     C
>= 0.6     D
 < 0.6     F
~~~~




~~~~
Enter score: 0.95
A
~~~~




~~~~
Enter score: perfect
Bad score
~~~~




~~~~
Enter score: 10.0
Bad score
~~~~




~~~~
Enter score: 0.75
C
~~~~




~~~~
Enter score: 0.5
F
~~~~


Eseguite ripetutamente il programma per testare i diversi valori di input.
